{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: 'http://localhost:9090',\n  timeout: 30000\n});\n\n//request 拦截器\n//可以自请求发送前对请求做一些处理\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = JSON.parse(localStorage.getItem(\"honey-user\") || '{}');\n  config.headers['token'] = user.token; //设置请求头\n  return config;\n}, error => {\n  console.error('request error: ' + error); //for debug\n  return Promise.reject(error);\n});\n\n//response 拦截器\n//可以在接口响应后统一处理结果\nrequest.interceptors.response.use(Response => {\n  let res = Response.data;\n\n  //兼容服务器返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === '401') {\n    router.push('/login');\n  }\n  return res;\n}, error => {\n  console.error('response error: ' + error); //for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","user","JSON","parse","localStorage","getItem","token","error","console","Promise","reject","response","Response","res","data","code","push"],"sources":["C:/Users/Chan9zero/Desktop/biyesheji-1/project-1/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"@/router\";\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:9090',\r\n    timeout: 30000\r\n})\r\n\r\n//request 拦截器\r\n//可以自请求发送前对请求做一些处理\r\n\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    let user = JSON.parse(localStorage.getItem(\"honey-user\") || '{}')\r\n    config.headers['token'] = user.token //设置请求头\r\n    return config\r\n}, error =>{\r\n    console.error('request error: ' + error) //for debug\r\n    return Promise.reject(error)\r\n    }\r\n);\r\n\r\n//response 拦截器\r\n//可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    Response => {\r\n        let res = Response.data;\r\n\r\n        //兼容服务器返回的字符串数据\r\n        if(typeof res === 'string'){\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        if(res.code === '401'){\r\n            router.push('/login')\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.error('response error: ' + error) //for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default request"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;;AAEAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC;EACjEN,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACK,KAAK,EAAC;EACrC,OAAOP,MAAM;AACjB,CAAC,EAAEQ,KAAK,IAAG;EACPC,OAAO,CAACD,KAAK,CAAC,iBAAiB,GAAGA,KAAK,CAAC,EAAC;EACzC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC5B,CACJ,CAAC;;AAED;AACA;AACAd,OAAO,CAACI,YAAY,CAACc,QAAQ,CAACb,GAAG,CAC7Bc,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEvB;EACA,IAAG,OAAOD,GAAG,KAAK,QAAQ,EAAC;IACvBA,GAAG,GAAGA,GAAG,GAAGX,IAAI,CAACC,KAAK,CAACU,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,IAAGA,GAAG,CAACE,IAAI,KAAK,KAAK,EAAC;IAClBvB,MAAM,CAACwB,IAAI,CAAC,QAAQ,CAAC;EACzB;EACA,OAAOH,GAAG;AACd,CAAC,EACDN,KAAK,IAAI;EACLC,OAAO,CAACD,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC,EAAC;EAC1C,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAed,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}